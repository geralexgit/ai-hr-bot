import { OllamaService } from './ollama.service.js';
import { ConversationService } from './conversation.service.js';
import { EvaluationRepository } from '../repositories/EvaluationRepository.js';
import { VacancyRepository } from '../repositories/VacancyRepository.js';
import { CandidateRepository } from '../repositories/CandidateRepository.js';
import { CreateEvaluationDto, AnalysisData } from '../types/index.js';
import { logger } from '../utils/logger.js';

export interface EvaluationResult {
  evaluation: any;
  feedback: string;
}

export class EvaluationService {
  private ollamaService = new OllamaService();
  private conversationService = new ConversationService();
  private evaluationRepository = new EvaluationRepository();
  private vacancyRepository = new VacancyRepository();
  private candidateRepository = new CandidateRepository();

  /**
   * Generate evaluation for a candidate based on their interview conversation
   */
  async generateEvaluation(chatId: number, vacancyId: number): Promise<EvaluationResult> {
    try {
      logger.info('Starting evaluation generation', { chatId, vacancyId });

      // Get candidate
      const candidate = await this.candidateRepository.findByTelegramUserId(chatId);
      if (!candidate) {
        throw new Error('Candidate not found');
      }

      // Get vacancy details
      const vacancy = await this.vacancyRepository.findById(vacancyId);
      if (!vacancy) {
        throw new Error('Vacancy not found');
      }

      // Get conversation history
      const conversationHistory = await this.conversationService.getHistory(chatId, vacancyId);
      
      if (conversationHistory.length === 0) {
        throw new Error('No conversation history found');
      }

      // Prepare conversation text for analysis
      const conversationText = conversationHistory
        .map(msg => `${msg.role === 'user' ? 'Candidate' : 'Interviewer'}: ${msg.content}`)
        .join('\n\n');

      // Generate evaluation using LLM
      const evaluationData = await this.analyzeWithLLM(conversationText, vacancy);

      // Create evaluation in database
      const createEvaluationDto: CreateEvaluationDto = {
        candidateId: candidate.id,
        vacancyId: vacancyId,
        overallScore: evaluationData.overallScore,
        technicalScore: evaluationData.technicalScore,
        communicationScore: evaluationData.communicationScore,
        problemSolvingScore: evaluationData.problemSolvingScore,
        strengths: evaluationData.strengths,
        gaps: evaluationData.gaps,
        contradictions: evaluationData.contradictions,
        recommendation: evaluationData.recommendation,
        feedback: evaluationData.feedback,
        analysisData: evaluationData.analysisData
      };

      const evaluation = await this.evaluationRepository.upsert(
        candidate.id, 
        vacancyId, 
        createEvaluationDto
      );

      logger.info('Evaluation generated successfully', {
        chatId,
        vacancyId,
        evaluationId: evaluation.id,
        overallScore: evaluation.overallScore,
        recommendation: evaluation.recommendation
      });

      return {
        evaluation,
        feedback: this.generateCandidateFeedback(evaluationData)
      };

    } catch (error) {
      logger.error('Error generating evaluation', { chatId, vacancyId, error });
      throw error;
    }
  }

  /**
   * Analyze conversation using LLM
   */
  private async analyzeWithLLM(conversationText: string, vacancy: any): Promise<any> {
    const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç HR-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.

–í–ê–ö–ê–ù–°–ò–Ø:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${vacancy.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${vacancy.description}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${JSON.stringify(vacancy.requirements, null, 2)}
–í–µ—Å–∞ –æ—Ü–µ–Ω–∫–∏: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ ${vacancy.evaluationWeights.technicalSkills}%, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è ${vacancy.evaluationWeights.communication}%, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á ${vacancy.evaluationWeights.problemSolving}%

–†–ê–ó–ì–û–í–û–† –° –ö–ê–ù–î–ò–î–ê–¢–û–ú:
${conversationText}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≤–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "overallScore": [—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 - –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞],
  "technicalScore": [—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏],
  "communicationScore": [—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 - –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è],
  "problemSolvingScore": [—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á],
  "strengths": ["—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1", "—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2", ...],
  "gaps": ["–ø—Ä–æ–±–µ–ª 1", "–ø—Ä–æ–±–µ–ª 2", ...],
  "contradictions": ["–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ 1", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ 2", ...],
  "recommendation": "proceed|reject|clarify",
  "feedback": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
  "analysisData": {
    "keySkills": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2", ...],
    "experienceLevel": "junior|middle|senior",
    "matchingResults": [
      {
        "requirement": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
        "score": [0-100],
        "evidence": "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
        "gaps": ["–ø—Ä–æ–±–µ–ª1", ...]
      }
    ]
  }
}

–í–ê–ñ–ù–û:
- –û—Ü–µ–Ω–∏–≤–∞–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –£—á–∏—Ç—ã–≤–∞–π –≤–µ—Å–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
- –î–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è "proceed" –µ—Å–ª–∏ –æ–±—â–∏–π –±–∞–ª–ª >= 70, "reject" –µ—Å–ª–∏ < 50, "clarify" –µ—Å–ª–∏ 50-69
- –í—Å–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
`;

    try {
      const rawOutput = await this.ollamaService.generate(prompt);
      
      // Clean and parse JSON response
      const cleanedOutput = rawOutput.replace(/```json|```/g, '').trim();
      const evaluationData = JSON.parse(cleanedOutput);

      // Validate and set defaults
      return {
        overallScore: Math.max(0, Math.min(100, evaluationData.overallScore || 0)),
        technicalScore: Math.max(0, Math.min(100, evaluationData.technicalScore || 0)),
        communicationScore: Math.max(0, Math.min(100, evaluationData.communicationScore || 0)),
        problemSolvingScore: Math.max(0, Math.min(100, evaluationData.problemSolvingScore || 0)),
        strengths: Array.isArray(evaluationData.strengths) ? evaluationData.strengths : [],
        gaps: Array.isArray(evaluationData.gaps) ? evaluationData.gaps : [],
        contradictions: Array.isArray(evaluationData.contradictions) ? evaluationData.contradictions : [],
        recommendation: ['proceed', 'reject', 'clarify'].includes(evaluationData.recommendation) 
          ? evaluationData.recommendation : 'clarify',
        feedback: evaluationData.feedback || '–û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
        analysisData: evaluationData.analysisData || {
          keySkills: [],
          experienceLevel: 'middle',
          matchingResults: []
        }
      };

    } catch (error) {
      logger.error('Error parsing LLM evaluation response', { error });
      
      // Return fallback evaluation
      return {
        overallScore: 50,
        technicalScore: 50,
        communicationScore: 50,
        problemSolvingScore: 50,
        strengths: ['–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∏–Ω—Ç–µ—Ä–≤—å—é'],
        gaps: ['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑'],
        contradictions: [],
        recommendation: 'clarify',
        feedback: '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.',
        analysisData: {
          keySkills: [],
          experienceLevel: 'middle',
          matchingResults: []
        }
      };
    }
  }

  /**
   * Generate candidate-friendly feedback
   */
  private generateCandidateFeedback(evaluationData: any): string {
    const { strengths, gaps, recommendation, feedback } = evaluationData;

    let message = `üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é**\n\n`;

    if (strengths.length > 0) {
      message += `‚úÖ **–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**\n`;
      strengths.forEach((strength: string) => {
        message += `‚Ä¢ ${strength}\n`;
      });
      message += `\n`;
    }

    if (gaps.length > 0) {
      message += `üìã **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:**\n`;
      gaps.forEach((gap: string) => {
        message += `‚Ä¢ ${gap}\n`;
      });
      message += `\n`;
    }

    message += `üí¨ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:** ${feedback}\n\n`;

    // Add recommendation-specific message
    switch (recommendation) {
      case 'proceed':
        message += `–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤.`;
        break;
      case 'reject':
        message += `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!`;
        break;
      case 'clarify':
        message += `ü§î –ù–∞–º –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è. HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.`;
        break;
    }

    return message;
  }

  /**
   * Check if evaluation exists for candidate and vacancy
   */
  async hasEvaluation(candidateId: number, vacancyId: number): Promise<boolean> {
    try {
      const evaluation = await this.evaluationRepository.findByCandidateAndVacancy(candidateId, vacancyId);
      return evaluation !== null;
    } catch (error) {
      logger.error('Error checking evaluation existence', { candidateId, vacancyId, error });
      return false;
    }
  }
}
